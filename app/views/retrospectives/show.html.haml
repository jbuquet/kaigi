- if current_user
  %form#new_statuses{ 'accept-charset'=> 'UTF-8' }
    %input#start_current_time{ type: :submit, value: 'Start' }
    %input#end_current_time{ type: :submit, value: 'End' }

    #write_stickies_time_section
      %span= 'Time next phase:'
      %input{ name: 'status[minutes]', type: 'number' }
      %input{ name: 'status[seconds]', type: 'number' }
      %input#set_time_next_phase{ type: :submit, value: 'Set' }
    %br

  .container-stickies
    %ul#stickies
      - current_retro.groups.each do |group|
        - initial_sticky = group.initial_sticky
        %li.sticky.idea.group-color{ data: { sticky: initial_sticky.to_json, group: group.to_json } }
          %ul.sticky-container
            - group.stickies.each do |sticky|
              - if sticky != initial_sticky
                %li.idea.grouped{ 'data-sticky' => sticky.to_json }
                  %p= sticky.body
          %p= initial_sticky.body

      - current_retro.ungrouped_stickies.each do |sticky|
        %li.sticky.idea.single{ 'data-sticky' => sticky.to_json }
          %span.pull-left.user-initial{ style: "background-color: #{sticky.user.color};" }
            = user_initial(sticky.user)
          %i.fa.fa-trash.remove-sticky.pull-right
          %ul.sticky-container
          %p= sticky.body

      %li.new-sticky.new
        %ul.sticky-container
        %form#new_sticky{ 'accept-charset'=> 'UTF-8' }
          %textarea.sticky-text{ maxlength: '50', resize: 'off', cols: '15', name: 'sticky[body]',
                                 rows: '6' }

- else
  = render 'users/join_modal'